// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/c"

// Values
fn atexit(FuncRef[() -> Unit]) -> Int

fn[T] exit(Int) -> T

let exit_failure : Int

let exit_success : Int

fn[T] free(Pointer[T]) -> Unit

fn[T] malloc(UInt64) -> Pointer[T]

fn memcpy(Pointer[Byte], Pointer[Byte], UInt64) -> Unit

fn memcpy_from_bytes(Pointer[Byte], Bytes, UInt64) -> Unit

fn memcpy_to_bytes(Bytes, Pointer[Byte], UInt64) -> Unit

fn memset(Pointer[Byte], Byte, UInt64) -> Unit

fn[T] none() -> Nullable[T]

let null : Null

fn[T : Sizeof] sizeof(T) -> UInt64

// Errors

// Types and methods
#external
pub type Null

#external
pub type Nullable[_]
fn[T] Nullable::is_null(Self[T]) -> Bool
fn[T] Nullable::none() -> Self[T]
fn[T] Nullable::of(T?) -> Self[T]
fn[T] Nullable::some(T) -> Self[T]
fn[T] Nullable::to(Self[T]) -> T?

#external
pub type Pointer[_]
fn[T : Sizeof] Pointer::add(Self[T], UInt64) -> Self[T]
fn[T, U] Pointer::cast(Self[T]) -> Self[U]
fn[T] Pointer::compare(Self[T], Self[T]) -> Int // from trait `Compare`
fn[T] Pointer::equal(Self[T], Self[T]) -> Bool // from trait `Eq`
fn[T] Pointer::is_not_null(Self[T]) -> Bool
fn[T] Pointer::is_null(Self[T]) -> Bool
fn[T : Load] Pointer::load(Self[T]) -> T
fn[T] Pointer::null() -> Self[T]
fn[T : Sizeof] Pointer::offset(Self[T], Int64) -> Self[T]
fn[T : Sizeof] Pointer::offset_from(Self[T], Self[T]) -> Int64
#deprecated
fn[T] Pointer::op_equal(Self[T], Self[T]) -> Bool // from trait `Eq`
fn[T : Load + Sizeof] Pointer::op_get(Self[T], UInt64) -> T
fn[T : Store + Sizeof] Pointer::op_set(Self[T], UInt64, T) -> Unit
fn[T] Pointer::sizeof() -> UInt64 // from trait `Sizeof`
fn[T : Store] Pointer::store(Self[T], T) -> Unit
fn[T : Sizeof] Pointer::sub(Self[T], UInt64) -> Self[T]
fn[T] Pointer::to_uint64(Self[T]) -> UInt64
impl[T] Compare for Pointer[T]
impl[T] Eq for Pointer[T]
impl[T] Load for Pointer[T]
impl[T] Sizeof for Pointer[T]
impl[T] Store for Pointer[T]

// Type aliases
pub typealias Pointer as Ptr

// Traits
pub(open) trait Load {
  load(Pointer[Self]) -> Self
}
impl Load for Byte
impl Load for Int
impl Load for Int16
impl Load for Int64
impl Load for UInt
impl Load for UInt16
impl Load for UInt64
impl Load for Float
impl Load for Double

pub(open) trait Sizeof {
  sizeof() -> UInt64
}
impl Sizeof for Byte
impl Sizeof for Int
impl Sizeof for Int16
impl Sizeof for Int64
impl Sizeof for UInt
impl Sizeof for UInt16
impl Sizeof for UInt64
impl Sizeof for Float
impl Sizeof for Double

trait Store
impl Store for Byte
impl Store for Int
impl Store for Int16
impl Store for Int64
impl Store for UInt
impl Store for UInt16
impl Store for UInt64
impl Store for Float
impl Store for Double

